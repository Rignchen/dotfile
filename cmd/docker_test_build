#!/bin/bash
# bash script to quickly build and run a shell in a docker container

# make help message
HELP="Usage: $(basename $0) [flags] [<Dockerfile> = Dockerfile]
Flags:
  -e <key=value>                 Set environment variables
  -h                             Display this help message
  -n <name>                      Name of the container and image (default: docker_test_build)
  -v <host_path:container_path>  Mount volumes when creating a container
  -s <shell>                     Shell to open in the container (default: sh)
"

# extract the flags from the cli arguments
BUILD_FLAG=""
FLAG_NAME="docker_test_build"
SHELL="sh"
DOCKERFILE="Dockerfile"
while getopts "e:hn:v:s:" opt; do
	case $opt in
		e)
			BUILD_FLAG+="--env $OPTARG "
			;;
		h)
			echo "$HELP"
			exit 0
			;;
		n)
			FLAG_NAME=$OPTARG
			;;
		v)
			BUILD_FLAG+="--volume $OPTARG "
			;;
		s)
			SHELL=$OPTARG
			;;
		\?)
			echo "$HELP" >&2
			exit 1
			;;
	esac
done
shift $((OPTIND -1))

# check if the dockerfile is provided
if [ $# -gt 0 ]; then
	DOCKERFILE=$1
fi

# open in editor
$EDITOR $DOCKERFILE

# test if the file exists
if [ ! -f "$DOCKERFILE" ]; then
	echo "Error: $DOCKERFILE does not exist" >&2
	exit 1
fi

build_and_run() {
	remove_image() {
		docker image rm -f $1
	}
	remove_image $FLAG_NAME
	
	docker build -t $FLAG_NAME -f $1 .
	if [ $? -eq 0 ]; then
		run_image $FLAG_NAME
		remove_image $FLAG_NAME
	fi
}

run_image() {
	remove_container() {
		docker kill $1
		docker rm -f $1
	}
	remove_container $FLAG_NAME
	
	docker run $BUILD_FLAG -P -d --name $FLAG_NAME $1
	if [ $? -eq 0 ]; then
		clear
		# display the content of the dockerfile so it's visible from the shell
		cat $DOCKERFILE
		echo "===================== ^ FILE ^ ====================="
		# open in shell
		docker exec -it $FLAG_NAME $SHELL
		echo "===================== ^ SHELL ^ ====================="
		# log the container
		docker logs $FLAG_NAME
		echo "===================== ^ LOGS ^ ====================="
		remove_container $FLAG_NAME
	fi
}

build_and_run $DOCKERFILE

